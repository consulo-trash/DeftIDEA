/* The following code was generated by JFlex 1.4.3 on 10/26/13 3:26 PM */

package org.dylanfoundry.deft.filetypes.dylan;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.dylanfoundry.deft.filetypes.dylan.psi.DylanTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/26/13 3:26 PM from the specification file
 * <tt>/home/cek/Dev/dylan-lang/DeftIDEA/src/org/dylanfoundry/deft/filetypes/dylan/Dylan.flex</tt>
 */
class _DylanLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_VALUE = 4;
  public static final int UNIQUE_STRING = 12;
  public static final int STRING = 10;
  public static final int YYINITIAL = 0;
  public static final int DYLAN_CODE = 6;
  public static final int COMMENT_BLOCK = 8;
  public static final int WAITING_SEPARATOR = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\46\1\45\1\0\1\50\1\44\22\0\1\47\1\3\1\23"+
    "\1\26\2\3\1\16\1\22\1\74\1\75\1\11\1\10\1\102\1\7"+
    "\1\43\1\12\1\24\1\31\6\33\2\1\1\20\1\103\1\14\1\5"+
    "\1\15\1\4\1\3\1\62\1\27\1\35\1\42\1\37\1\53\1\66"+
    "\1\72\1\67\1\2\1\60\1\63\1\71\1\55\1\32\1\70\1\2"+
    "\1\57\1\41\1\51\1\73\1\64\1\65\1\34\1\61\1\2\1\76"+
    "\1\21\1\77\1\13\1\104\1\0\1\36\1\30\1\35\1\42\1\40"+
    "\1\54\1\66\1\72\1\67\1\2\1\60\1\63\1\71\1\56\1\32"+
    "\1\70\1\2\1\25\1\41\1\52\1\73\1\64\1\65\1\34\1\61"+
    "\1\2\1\100\1\17\1\101\1\6\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\2\3\1\4\1\5\2\6\1\7"+
    "\1\10\2\11\1\7\1\12\1\13\1\1\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\3\1\1\30\1\1\7\13\1\31\2\32"+
    "\13\13\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\3\44\2\45\1\46\1\45\2\47\1\50"+
    "\1\47\4\0\1\12\1\51\1\0\1\52\1\53\1\54"+
    "\1\55\1\12\2\0\1\56\1\44\1\57\1\60\1\0"+
    "\1\61\1\0\1\62\1\63\1\0\1\64\1\0\4\65"+
    "\3\0\1\66\1\0\1\67\4\0\1\70\1\71\2\0"+
    "\1\72\1\73\1\13\1\74\24\13\1\12\2\0\1\75"+
    "\17\13\1\76\1\77\6\13\1\100\1\101\1\102\2\12"+
    "\3\0\1\61\1\0\2\61\1\0\1\103\5\0\1\65"+
    "\2\104\1\0\3\12\3\0\15\13\1\105\2\13\1\106"+
    "\10\13\1\107\3\13\1\110\4\13\1\111\13\13\1\112"+
    "\3\13\2\0\1\12\1\0\1\12\1\61\1\12\3\0"+
    "\1\113\3\13\1\114\4\13\1\115\6\13\1\116\1\13"+
    "\1\117\5\13\1\120\1\121\1\122\7\13\1\123\12\13"+
    "\1\12\1\0\1\124\1\0\1\125\1\126\1\127\1\130"+
    "\4\13\1\131\1\13\1\132\6\13\1\133\6\13\1\134"+
    "\3\13\1\135\3\13\1\136\2\13\1\137\1\140\1\13"+
    "\1\0\1\13\1\141\5\13\1\142\1\143\1\144\1\13"+
    "\1\145\1\146\13\13\1\147\1\150\1\13\1\151\1\0"+
    "\3\13\1\152\4\13\1\153\2\13\1\154\6\13\1\155"+
    "\1\156\1\0\1\13\1\157\5\13\1\160\1\161\1\162"+
    "\5\13\1\163\1\164\2\13\1\165\7\13\1\166\24\13"+
    "\1\167\5\13\1\170\6\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u01e3\0\u02b2\0\u01e3\0\u02f7\0\u01e3\0\u033c"+
    "\0\u0381\0\u03c6\0\u01e3\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f"+
    "\0\u0564\0\u05a9\0\u05ee\0\u05ee\0\u04da\0\u0633\0\u04da\0\u0678"+
    "\0\u06bd\0\u04da\0\u04da\0\u0702\0\u0747\0\u078c\0\u01e3\0\u07d1"+
    "\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9"+
    "\0\u0a3e\0\u01e3\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc"+
    "\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u01e3\0\u01e3\0\u01e3"+
    "\0\u01e3\0\u01e3\0\u01e3\0\u01e3\0\u01e3\0\u04da\0\u01e3\0\u0d7a"+
    "\0\u0dbf\0\u01e3\0\u0e04\0\u01e3\0\u02f7\0\u01e3\0\u0e49\0\u01e3"+
    "\0\u02f7\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u04da"+
    "\0\u01e3\0\u04da\0\u04da\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u01e3"+
    "\0\u1140\0\u04da\0\u04da\0\u1185\0\u11ca\0\u120f\0\u120f\0\u01e3"+
    "\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437"+
    "\0\u147c\0\u14c1\0\u01e3\0\u1506\0\u01e3\0\u154b\0\u1590\0\u15d5"+
    "\0\u161a\0\u01e3\0\u01e3\0\u165f\0\u16a4\0\u01e3\0\u01e3\0\u16e9"+
    "\0\u0495\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc"+
    "\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4"+
    "\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c"+
    "\0\u0495\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff"+
    "\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127"+
    "\0\u0495\0\u0495\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5"+
    "\0\u01e3\0\u01e3\0\u01e3\0\u0f18\0\u230a\0\u234f\0\u2394\0\u23d9"+
    "\0\u241e\0\u2463\0\u01e3\0\u120f\0\u24a8\0\u01e3\0\u24ed\0\u2532"+
    "\0\u2577\0\u25bc\0\u0fe7\0\u2601\0\u01e3\0\u147c\0\u2646\0\u154b"+
    "\0\u1590\0\u15d5\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4"+
    "\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c"+
    "\0\u2a51\0\u2a96\0\u0495\0\u2adb\0\u2b20\0\u0495\0\u2b65\0\u2baa"+
    "\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u01e3\0\u2d8d"+
    "\0\u2dd2\0\u2e17\0\u0495\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u0495"+
    "\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153"+
    "\0\u3198\0\u31dd\0\u3222\0\u0495\0\u3267\0\u32ac\0\u32f1\0\u3336"+
    "\0\u337b\0\u33c0\0\u3405\0\u01e3\0\u24a8\0\u24ed\0\u344a\0\u348f"+
    "\0\u34d4\0\u01e3\0\u3519\0\u355e\0\u35a3\0\u0495\0\u35e8\0\u362d"+
    "\0\u3672\0\u36b7\0\u0495\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810"+
    "\0\u3855\0\u389a\0\u38df\0\u0495\0\u3924\0\u3969\0\u39ae\0\u39f3"+
    "\0\u3a38\0\u0495\0\u0495\0\u0495\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c"+
    "\0\u3b91\0\u3bd6\0\u3c1b\0\u0495\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f"+
    "\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd\0\u0ed3\0\u3f12"+
    "\0\u01e3\0\u3f57\0\u01e3\0\u0495\0\u0495\0\u0495\0\u3f9c\0\u3fe1"+
    "\0\u4026\0\u406b\0\u0495\0\u40b0\0\u0495\0\u40f5\0\u413a\0\u417f"+
    "\0\u41c4\0\u4209\0\u424e\0\u0495\0\u4293\0\u42d8\0\u431d\0\u4362"+
    "\0\u43a7\0\u43ec\0\u0495\0\u4431\0\u4476\0\u44bb\0\u0495\0\u4500"+
    "\0\u4545\0\u458a\0\u0495\0\u45cf\0\u4614\0\u0495\0\u0495\0\u4659"+
    "\0\u469e\0\u46e3\0\u0495\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u483c"+
    "\0\u0495\0\u0495\0\u0495\0\u4881\0\u0495\0\u0495\0\u48c6\0\u490b"+
    "\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee\0\u4b33"+
    "\0\u4b78\0\u0495\0\u0495\0\u4bbd\0\u0495\0\u4c02\0\u4c47\0\u4c8c"+
    "\0\u4cd1\0\u0495\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\u0495\0\u4e2a"+
    "\0\u4e6f\0\u0495\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8\0\u500d"+
    "\0\u0495\0\u0495\0\u5052\0\u5097\0\u0495\0\u50dc\0\u5121\0\u5166"+
    "\0\u51ab\0\u51f0\0\u0495\0\u0495\0\u0495\0\u5235\0\u527a\0\u52bf"+
    "\0\u5304\0\u5349\0\u01e3\0\u0495\0\u538e\0\u53d3\0\u0495\0\u5418"+
    "\0\u545d\0\u54a2\0\u54e7\0\u552c\0\u5571\0\u55b6\0\u0495\0\u55fb"+
    "\0\u5640\0\u5685\0\u56ca\0\u570f\0\u5754\0\u5799\0\u57de\0\u5823"+
    "\0\u5868\0\u58ad\0\u58f2\0\u5937\0\u597c\0\u59c1\0\u5a06\0\u5a4b"+
    "\0\u5a90\0\u5ad5\0\u5b1a\0\u0495\0\u5b5f\0\u5ba4\0\u5be9\0\u5c2e"+
    "\0\u5c73\0\u0495\0\u5cb8\0\u5cfd\0\u5d42\0\u5d87\0\u5dcc\0\u5e11";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\10\1\11\22\10\1\11\1\10\2\11\1\10\1\11"+
    "\1\10\7\11\1\10\1\12\1\13\3\14\23\11\31\10"+
    "\1\15\23\10\1\16\1\17\3\20\34\10\21\21\1\10"+
    "\22\21\1\22\1\23\1\24\2\20\34\21\1\10\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\1\26\1\50\2\51\1\25\1\52"+
    "\1\25\1\26\1\53\1\54\2\55\1\56\1\57\1\60"+
    "\1\61\1\62\3\20\2\63\2\64\3\26\1\65\1\26"+
    "\1\54\1\66\1\67\1\70\1\71\1\72\1\26\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\11\107\1\110\1\111\31\107\1\61"+
    "\1\62\37\107\21\112\1\113\1\112\1\114\20\112\1\115"+
    "\1\17\37\112\21\116\1\117\1\116\1\120\20\116\1\121"+
    "\1\17\37\116\106\0\2\11\4\0\1\11\14\0\2\11"+
    "\1\0\14\11\6\0\23\11\56\0\1\13\105\0\3\14"+
    "\101\0\1\17\105\0\3\20\34\0\21\21\1\0\22\21"+
    "\2\0\2\21\1\0\34\21\45\0\1\23\37\0\21\21"+
    "\1\0\22\21\2\0\2\24\1\20\34\21\1\0\1\25"+
    "\1\122\7\123\1\124\5\123\4\0\1\25\1\122\1\0"+
    "\2\122\1\25\1\122\1\25\3\122\2\125\2\122\1\126"+
    "\5\0\23\122\10\0\1\123\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\23\26\10\0\1\26\1\0"+
    "\1\130\1\26\15\130\4\0\1\130\1\26\1\0\2\26"+
    "\1\130\1\26\1\130\7\26\6\0\23\26\10\0\1\130"+
    "\4\0\1\131\101\0\1\130\1\26\2\130\1\132\7\130"+
    "\1\133\2\130\4\0\1\130\1\26\1\0\2\26\1\130"+
    "\1\26\1\130\7\26\6\0\23\26\10\0\1\130\5\0"+
    "\1\134\100\0\1\135\5\0\2\136\13\0\1\135\4\0"+
    "\1\135\1\0\1\135\7\0\1\137\52\0\1\140\1\141"+
    "\73\0\1\130\1\26\2\130\1\142\12\130\4\0\1\130"+
    "\1\26\1\0\2\26\1\130\1\26\1\130\7\26\6\0"+
    "\23\26\10\0\1\130\1\0\1\130\1\26\2\130\1\143"+
    "\12\130\4\0\1\130\1\26\1\0\2\26\1\130\1\26"+
    "\1\130\7\26\6\0\23\26\10\0\1\130\1\0\1\144"+
    "\1\145\1\146\1\0\1\147\3\0\1\146\1\0\5\146"+
    "\1\150\3\0\1\144\1\145\1\0\2\145\1\144\1\145"+
    "\1\144\7\145\6\0\23\145\10\0\1\146\1\0\1\151"+
    "\1\152\1\153\1\0\1\154\1\155\2\156\1\157\1\156"+
    "\1\157\2\154\2\157\1\160\3\0\1\151\1\152\1\0"+
    "\2\152\1\151\1\152\1\151\7\152\6\0\23\152\10\0"+
    "\1\153\21\161\1\162\1\0\62\161\23\0\1\163\1\0"+
    "\1\164\1\165\2\166\1\0\1\167\1\0\1\170\1\0"+
    "\1\171\12\0\2\172\2\173\2\174\1\164\1\175\1\0"+
    "\1\171\11\0\1\176\1\0\1\177\7\0\17\26\1\127"+
    "\3\0\2\26\1\0\10\26\2\200\2\26\6\0\10\26"+
    "\1\201\1\26\1\202\3\26\1\203\4\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\14\26\6\0"+
    "\2\204\21\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\1\26\1\205\1\0\3\26\1\206\3\26\1\207\4\26"+
    "\6\0\6\26\1\205\2\26\1\207\1\210\10\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\2\211"+
    "\12\26\6\0\2\26\2\212\6\26\1\213\10\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\5\26"+
    "\1\214\6\26\6\0\4\26\2\215\4\26\1\216\10\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\10\26\2\217\2\26\6\0\12\26\1\220\6\26\1\221"+
    "\1\222\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\3\26\1\223\4\26\2\224\2\26\6\0\10\26"+
    "\1\225\12\26\10\0\1\26\1\0\1\226\5\0\2\227"+
    "\13\0\1\226\4\0\1\226\1\0\1\226\7\0\1\230"+
    "\106\0\1\62\40\0\17\26\1\127\3\0\2\26\1\0"+
    "\3\26\1\231\4\26\2\232\2\26\6\0\21\26\1\233"+
    "\1\26\10\0\1\26\1\0\17\26\1\127\3\0\1\26"+
    "\1\234\1\0\3\26\1\235\10\26\6\0\6\26\1\234"+
    "\7\26\1\236\3\26\1\237\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\10\26\2\240\2\26\6\0"+
    "\23\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\3\26\1\241\4\26\2\242\2\26\6\0\16\26"+
    "\1\243\4\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\7\26\1\244\4\26\6\0\11\26\1\244"+
    "\11\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\14\26\6\0\16\26\1\245\2\26\1\246\1\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\10\26\2\247\2\26\6\0\23\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\2\250"+
    "\2\251\2\252\15\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\3\26\1\253\3\26\1\254\2\255"+
    "\2\26\6\0\11\26\1\254\11\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\7\26\1\256\4\26"+
    "\6\0\11\26\1\256\11\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\12\26\1\257\1\26\6\0"+
    "\4\26\2\260\15\26\10\0\1\26\12\0\1\261\103\0"+
    "\1\262\114\0\1\263\1\0\3\263\2\0\1\263\5\0"+
    "\1\263\1\0\1\263\11\0\1\263\1\0\1\263\1\0"+
    "\1\263\47\0\1\116\1\0\3\116\2\0\1\116\5\0"+
    "\1\116\1\0\1\116\11\0\1\116\1\0\1\116\1\0"+
    "\1\116\27\0\1\123\1\26\15\123\4\0\1\123\1\26"+
    "\1\0\2\26\1\123\1\26\1\123\7\26\6\0\23\26"+
    "\10\0\1\123\1\0\1\123\1\122\15\123\4\0\1\123"+
    "\1\122\1\0\2\122\1\123\1\122\1\123\7\122\6\0"+
    "\23\122\10\0\1\123\1\0\1\264\1\122\15\123\4\0"+
    "\1\264\1\122\1\0\2\122\1\264\1\122\1\264\7\122"+
    "\6\0\23\122\10\0\1\123\1\0\1\265\1\26\4\123"+
    "\2\266\7\123\4\0\1\265\1\26\1\0\2\26\1\265"+
    "\1\26\1\265\7\26\6\0\23\26\10\0\1\123\1\0"+
    "\1\226\5\0\2\227\13\0\1\226\4\0\1\226\1\0"+
    "\1\226\3\0\2\267\2\270\43\0\1\144\1\145\1\146"+
    "\1\0\1\271\1\272\1\0\1\273\1\274\1\273\1\274"+
    "\2\271\2\274\1\275\3\0\1\144\1\145\1\0\2\145"+
    "\1\144\1\145\1\144\7\145\6\0\23\145\10\0\1\146"+
    "\5\0\1\276\100\0\1\135\10\0\1\277\11\0\1\135"+
    "\4\0\1\135\1\0\1\135\3\0\2\267\2\0\1\126"+
    "\42\0\1\300\22\0\1\300\4\0\1\300\1\0\1\300"+
    "\52\0\1\226\5\0\2\227\13\0\1\226\4\0\1\226"+
    "\1\0\1\226\51\0\44\141\2\0\37\141\1\0\1\144"+
    "\1\301\15\144\4\0\1\144\1\301\1\0\2\301\1\144"+
    "\1\301\1\144\7\301\6\0\23\301\10\0\1\144\1\0"+
    "\17\145\4\0\2\145\1\0\14\145\6\0\23\145\10\0"+
    "\1\145\1\0\1\146\1\145\15\146\4\0\1\146\1\145"+
    "\1\0\2\145\1\146\1\145\1\146\7\145\6\0\23\145"+
    "\10\0\1\146\1\0\1\151\1\302\15\151\4\0\1\151"+
    "\1\302\1\0\2\302\1\151\1\302\1\151\7\302\6\0"+
    "\23\302\10\0\1\151\1\0\17\152\1\303\3\0\2\152"+
    "\1\0\14\152\6\0\23\152\10\0\1\152\1\0\1\153"+
    "\1\152\15\153\4\0\1\153\1\152\1\0\2\152\1\153"+
    "\1\152\1\153\7\152\6\0\23\152\10\0\1\153\1\0"+
    "\1\153\1\152\2\153\1\157\12\153\1\303\3\0\1\153"+
    "\1\152\1\0\2\152\1\153\1\152\1\153\7\152\6\0"+
    "\23\152\10\0\1\153\5\0\1\304\12\0\1\303\104\0"+
    "\1\303\65\0\1\153\1\152\15\153\1\303\3\0\1\153"+
    "\1\152\1\0\2\152\1\153\1\152\1\153\7\152\6\0"+
    "\23\152\10\0\1\153\5\0\1\156\121\0\1\305\103\0"+
    "\1\161\1\306\3\161\2\0\1\161\5\0\1\161\1\0"+
    "\1\161\11\0\1\161\1\0\1\161\1\0\1\161\65\0"+
    "\2\307\70\0\1\310\4\0\1\310\77\0\1\311\4\0"+
    "\1\311\1\0\1\311\52\0\1\312\22\0\1\312\2\0"+
    "\3\312\1\0\1\312\1\0\4\312\1\0\1\312\10\0"+
    "\2\312\5\0\1\312\105\0\1\313\60\0\2\314\103\0"+
    "\2\315\45\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\12\26\1\316\2\26\1\317\5\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\3\26\1\320"+
    "\10\26\6\0\23\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\14\26\6\0\4\26\2\321\15\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\21\26\1\322\1\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\10\26\2\323\2\26"+
    "\6\0\23\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\4\26\2\324\11\26\1\325"+
    "\3\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\12\26\1\326\1\26\6\0\23\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\7\26\1\327"+
    "\2\330\2\26\6\0\11\26\1\327\11\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\3\26\1\331"+
    "\10\26\6\0\23\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\14\26\6\0\2\332\21\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\12\26\1\333\10\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\6\26\1\334\5\26\6\0"+
    "\17\26\1\335\3\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\13\26\1\336\6\0\23\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\12\26"+
    "\1\337\1\26\6\0\23\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\12\26\1\340"+
    "\10\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\3\26\1\341\10\26\6\0\23\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\7\26\1\342"+
    "\4\26\6\0\11\26\1\342\11\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\16\26"+
    "\1\343\4\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\20\26\1\344\2\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\2\26\2\345\17\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\4\26\2\346"+
    "\15\26\10\0\1\26\1\0\1\226\22\0\1\226\4\0"+
    "\1\226\1\0\1\226\3\0\2\267\2\270\43\0\1\226"+
    "\22\0\1\226\4\0\1\226\1\0\1\226\114\0\1\347"+
    "\42\0\17\26\1\127\3\0\2\26\1\0\12\26\1\350"+
    "\1\26\6\0\23\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\10\26\2\351\2\26\6\0\23\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\3\26\1\352\10\26\6\0\23\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\1\26\1\353\1\0\14\26\6\0"+
    "\6\26\1\353\14\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\14\26\6\0\4\26\2\354\15\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\4\26\2\355\15\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\10\26"+
    "\1\356\12\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\6\26\1\357\5\26\6\0\23\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\2\360\21\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\2\361\12\26\6\0\23\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\1\26\1\362\1\0"+
    "\14\26\6\0\6\26\1\362\14\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\2\363"+
    "\21\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\10\26\2\364\2\26\6\0\16\26\1\365\4\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\4\26\2\366\15\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\10\26\2\367\2\26"+
    "\6\0\23\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\13\26\1\370\6\0\23\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\6\26\1\371"+
    "\5\26\6\0\23\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\14\26\6\0\2\372\21\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\4\26\2\373\15\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\10\26\2\374\2\26\6\0"+
    "\16\26\1\375\4\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\14\26\6\0\2\376\10\26\1\377"+
    "\10\26\10\0\1\26\1\0\1\265\1\122\15\123\4\0"+
    "\1\265\1\122\1\0\2\122\1\265\1\122\1\265\5\122"+
    "\2\u0100\6\0\23\122\10\0\1\123\1\0\1\265\1\122"+
    "\4\123\2\u0101\7\123\4\0\1\265\1\122\1\0\2\122"+
    "\1\265\1\122\1\265\7\122\6\0\23\122\10\0\1\123"+
    "\1\0\1\u0102\5\0\2\u0103\13\0\1\u0102\4\0\1\u0102"+
    "\1\0\1\u0102\75\0\1\u0104\61\0\1\146\1\145\2\146"+
    "\1\274\12\146\4\0\1\146\1\145\1\0\2\145\1\146"+
    "\1\145\1\146\7\145\6\0\23\145\10\0\1\146\5\0"+
    "\1\u0105\104\0\1\273\100\0\1\u0106\22\0\1\u0106\4\0"+
    "\1\u0106\1\0\1\u0106\52\0\1\300\22\0\1\300\4\0"+
    "\1\300\1\0\1\300\3\0\2\267\2\0\1\126\42\0"+
    "\1\144\1\145\15\144\4\0\1\144\1\145\1\0\2\145"+
    "\1\144\1\145\1\144\7\145\6\0\23\145\10\0\1\144"+
    "\1\0\1\151\1\152\15\151\4\0\1\151\1\152\1\0"+
    "\2\152\1\151\1\152\1\151\7\152\6\0\23\152\10\0"+
    "\1\151\5\0\1\156\12\0\1\303\125\0\1\u0107\126\0"+
    "\1\u0108\55\0\1\u0109\131\0\1\u010a\24\0\17\26\1\127"+
    "\3\0\2\26\1\0\3\26\1\u010b\10\26\6\0\23\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\16\26\1\u010c\4\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\6\26\1\u010d\5\26"+
    "\6\0\23\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\13\26\1\u010e\6\0\23\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\10\26\2\u010f"+
    "\2\26\6\0\23\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\7\26\1\u0110\4\26\6\0\11\26"+
    "\1\u0110\11\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\12\26\1\u0111\1\26\6\0\23\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\10\26\1\u0112\12\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\10\26\2\u0113\2\26\6\0"+
    "\23\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\12\26\1\u0114\1\26\6\0\23\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\7\26\1\u0115"+
    "\4\26\6\0\11\26\1\u0115\11\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\13\26"+
    "\1\u0116\7\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\10\26\2\u0117\2\26\6\0\23\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\10\26"+
    "\2\u0118\2\26\6\0\23\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\3\26\1\u0119\10\26\6\0"+
    "\23\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\10\26\2\u011a\2\26\6\0\23\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\10\26\2\u011b"+
    "\2\26\6\0\23\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\14\26\6\0\2\u011c\21\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\1\26\1\u011d\1\0"+
    "\14\26\6\0\6\26\1\u011d\14\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\2\u011e"+
    "\21\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\7\26\1\u011f\4\26\6\0\11\26\1\u011f\11\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\16\26\1\u0120\4\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\7\26\1\u0121\4\26"+
    "\6\0\11\26\1\u0121\11\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\2\u0122\21\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\4\26\2\u0123\15\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\20\26"+
    "\1\u0124\2\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\7\26\1\u0125\4\26\6\0\11\26\1\u0125"+
    "\11\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\6\26\1\u0126\5\26\6\0\23\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\10\26\2\u0127"+
    "\2\26\6\0\23\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\7\26\1\u0128\4\26\6\0\11\26"+
    "\1\u0128\11\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\1\26\1\u0129\1\0\14\26\6\0\6\26\1\u0129\14\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\16\26\1\u012a\4\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\21\26"+
    "\1\u012b\1\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\4\26\2\u012c\15\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\12\26\1\u012d\10\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\10\26\2\u012e\2\26\6\0"+
    "\23\26\10\0\1\26\1\0\17\26\1\127\3\0\1\26"+
    "\1\u012f\1\0\14\26\6\0\6\26\1\u012f\14\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\22\26\1\u0130\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\1\26\1\u0131\1\0\14\26\6\0\6\26\1\u0131"+
    "\14\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\14\26\6\0\21\26\1\u0132\1\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\13\26\1\u0133"+
    "\6\0\23\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\4\26\2\u0134\15\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\16\26\1\u0135\4\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\10\26\2\u0136\2\26\6\0"+
    "\23\26\10\0\1\26\1\0\1\123\1\26\15\123\4\0"+
    "\1\u0137\1\26\1\0\2\26\1\123\1\26\1\123\7\26"+
    "\6\0\23\26\10\0\1\123\1\0\1\265\1\122\15\123"+
    "\4\0\1\265\1\122\1\0\2\122\1\265\1\122\1\265"+
    "\7\122\6\0\23\122\10\0\1\123\1\0\1\u0102\22\0"+
    "\1\u0102\4\0\1\u0102\1\0\1\u0102\5\0\2\270\43\0"+
    "\1\u0102\5\0\2\u0138\13\0\1\u0102\4\0\1\u0102\1\0"+
    "\1\u0102\122\0\2\u0139\41\0\1\u013a\146\0\2\u013b\33\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\14\26"+
    "\1\u013c\6\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\4\26\2\u013d\15\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\7\26\1\u013e\13\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\1\26\1\u013f\1\0\14\26\6\0\6\26"+
    "\1\u013f\14\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\2\u0140\21\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\14\26\6\0"+
    "\2\u0141\21\26\10\0\1\26\1\0\6\26\1\u0142\10\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\23\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\12\26"+
    "\1\u0143\1\26\6\0\23\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\4\26\2\u0144"+
    "\15\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\10\26\2\u0145\2\26\6\0\23\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\1\26\1\u0146\1\0\14\26"+
    "\6\0\6\26\1\u0146\14\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\17\26\1\u0147"+
    "\3\26\10\0\1\26\1\0\17\26\1\127\3\0\1\26"+
    "\1\u0148\1\0\14\26\6\0\6\26\1\u0148\14\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\16\26\1\u0149\4\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\6\26\1\u014a\5\26\6\0"+
    "\23\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\10\26\2\u014b\2\26\6\0\23\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\10\26\2\u014c"+
    "\2\26\6\0\23\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\14\26\6\0\16\26\1\u014d\4\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\4\26\2\u014e\15\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\20\26"+
    "\1\u014f\2\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\12\26\1\u0150\10\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\2\u0151\21\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\13\26\1\u0152\6\0\23\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\12\26\1\u0153\10\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\7\26\1\u0154\4\26\6\0"+
    "\11\26\1\u0154\11\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\7\26\1\u0155\4\26\6\0\11\26"+
    "\1\u0155\11\26\10\0\1\26\1\0\6\26\1\u0156\10\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\23\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\10\26"+
    "\2\u0157\2\26\6\0\23\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\1\26\1\u0158\1\0\14\26\6\0\6\26"+
    "\1\u0158\14\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\7\26\1\u0159\4\26\6\0\11\26\1\u0159"+
    "\11\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\14\26\6\0\12\26\1\u015a\10\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\3\26\1\u015b"+
    "\10\26\6\0\23\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\3\26\1\u015c\10\26\6\0\23\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\12\26\1\u015d\10\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\15\26"+
    "\1\u015e\5\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\12\26\1\u015f\10\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\12\26"+
    "\1\u0160\1\26\6\0\23\26\10\0\1\26\1\0\1\u0102"+
    "\22\0\1\u0102\4\0\1\u0102\1\0\1\u0102\131\0\1\u0161"+
    "\25\0\17\26\1\127\3\0\2\26\1\0\14\26\6\0"+
    "\14\26\1\u0162\6\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\10\26\2\u0163\2\26\6\0\23\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\7\26\1\u0164\4\26\6\0\11\26\1\u0164\11\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\13\26"+
    "\1\u0165\6\0\23\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\14\26\6\0\22\26\1\u0166\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\14\26\1\u0167\6\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\2\u0168\21\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\2\u0169\21\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\2\26\2\u016a"+
    "\17\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\14\26\6\0\2\u016b\21\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\13\26\1\u016c\6\0"+
    "\23\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\14\26\6\0\4\26\2\u016d\15\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\10\26\2\u016e"+
    "\2\26\6\0\23\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\14\26\6\0\16\26\1\u016f\4\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\12\26\1\u0170\10\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\16\26"+
    "\1\u0171\4\26\10\0\1\26\1\0\6\26\1\u0172\10\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\23\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\1\26\1\u0173\1\0"+
    "\14\26\6\0\6\26\1\u0173\14\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\2\u0174\12\26\6\0"+
    "\23\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\3\26\1\u0175\6\26\1\u0176\1\26\6\0\12\26"+
    "\1\u0177\10\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\16\26\1\u0178\4\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\2\u0179\21\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\10\26\2\u017a\2\26\6\0\23\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\13\26\1\u017b\6\0\23\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\10\26\2\u017c\2\26\6\0"+
    "\23\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\12\26\1\u017d\1\26\6\0\23\26\10\0\1\26"+
    "\37\0\2\u017e\45\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\16\26\1\u017f\4\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\4\26"+
    "\2\u0180\15\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\3\26\1\u0181\10\26\6\0\23\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\17\26\1\u0182\3\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\7\26\1\u0183\4\26\6\0"+
    "\11\26\1\u0183\11\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\14\26\6\0\16\26\1\u0184\4\26"+
    "\10\0\1\26\1\0\6\26\1\u0185\10\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\23\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\6\26\1\u0186\5\26"+
    "\6\0\23\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\10\26\1\u0187\12\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\3\26"+
    "\1\u0188\10\26\6\0\23\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\2\u0189\12\26\6\0\23\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\10\26\1\u018a\12\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\12\26"+
    "\1\u018b\10\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\17\26\1\u018c\2\26\1\u018d"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\3\26\1\u018e\10\26\6\0\2\u018f\21\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\3\26\1\u0190"+
    "\10\26\6\0\23\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\6\26\1\u0191\5\26\6\0\23\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\10\26\2\u010e\2\26\6\0\23\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\1\26\1\u0192\1\0\14\26\6\0"+
    "\6\26\1\u0192\14\26\10\0\1\26\61\0\1\u0193\24\0"+
    "\17\26\1\127\3\0\2\26\1\0\12\26\1\u0194\1\26"+
    "\6\0\23\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\2\u0195\21\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\14\26\6\0"+
    "\14\26\1\u0196\6\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\1\26\1\u0197\1\0\14\26\6\0\6\26\1\u0197"+
    "\14\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\3\26\1\u0198\10\26\6\0\23\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\12\26\1\u0199"+
    "\1\26\6\0\23\26\10\0\1\26\1\0\6\26\1\u019a"+
    "\10\26\1\127\3\0\2\26\1\0\14\26\6\0\23\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\4\26\2\u019b\15\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\10\26"+
    "\1\u019c\12\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\10\26\2\u019d\2\26\6\0\23\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\10\26"+
    "\2\u019e\2\26\6\0\23\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\2\u019f\21\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\6\26\1\u01a0\5\26\6\0\23\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\3\26\1\u01a1\10\26"+
    "\6\0\23\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\6\26\1\u01a2\5\26\6\0\23\26\10\0"+
    "\1\26\41\0\1\u01a3\44\0\17\26\1\127\3\0\2\26"+
    "\1\0\10\26\2\u01a4\2\26\6\0\23\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\14\26\6\0"+
    "\4\26\2\u01a5\15\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\13\26\1\u01a6\6\0\23\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\4\26\2\u01a7\15\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\10\26\1\u01a8"+
    "\12\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\2\u01a9\12\26\6\0\23\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\4\26"+
    "\2\u01aa\15\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\17\26\1\u01ab\3\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\7\26\1\u01ac\13\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\1\26\1\u01ad\1\0\14\26\6\0\6\26"+
    "\1\u01ad\14\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\7\26\1\u010e\13\26\10\0"+
    "\1\26\1\0\6\26\1\u01ae\10\26\1\127\3\0\2\26"+
    "\1\0\14\26\6\0\23\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\12\26\1\u01af\1\26\6\0"+
    "\23\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\14\26\6\0\20\26\1\u01b0\2\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\14\26\6\0"+
    "\16\26\1\203\4\26\10\0\1\26\1\0\6\26\1\u01b1"+
    "\10\26\1\127\3\0\2\26\1\0\14\26\6\0\23\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\22\26\1\u01b2\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\10\26\2\u01b3\2\26\6\0"+
    "\23\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\7\26\1\u01b4\4\26\6\0\11\26\1\u01b4\11\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\20\26\1\u01b5\2\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\2\u01b6\12\26\6\0"+
    "\23\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\14\26\6\0\2\26\2\u01b7\17\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\14\26\6\0"+
    "\2\u01b8\21\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\2\u01b9\21\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\14\26\6\0"+
    "\15\26\1\u0179\5\26\10\0\1\26\1\0\17\26\1\127"+
    "\3\0\2\26\1\0\10\26\2\u01ba\2\26\6\0\23\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\3\26\1\u01bb\10\26\6\0\23\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\16\26"+
    "\1\u01bc\4\26\10\0\1\26\1\0\6\26\1\u01bd\10\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\23\26\10\0"+
    "\1\26\1\0\6\26\1\u01be\10\26\1\127\3\0\2\26"+
    "\1\0\14\26\6\0\23\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\2\u01bf\21\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\14\26\6\0\12\26\1\u01c0\10\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\12\26"+
    "\1\u0179\10\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\2\u01c1\21\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\14\26\6\0"+
    "\2\u01c2\21\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\21\26\1\u01c3\1\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\12\26"+
    "\1\u01c4\1\26\6\0\23\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\3\26\1\u01c5\10\26\6\0"+
    "\23\26\10\0\1\26\1\0\17\26\1\127\3\0\2\26"+
    "\1\0\14\26\6\0\21\26\1\u01c6\1\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\3\26\1\u01c7"+
    "\10\26\6\0\23\26\10\0\1\26\1\0\6\26\1\u01c8"+
    "\10\26\1\127\3\0\2\26\1\0\14\26\6\0\23\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\1\26\1\u01c9"+
    "\1\0\14\26\6\0\6\26\1\u01c9\14\26\10\0\1\26"+
    "\1\0\17\26\1\127\3\0\2\26\1\0\13\26\1\u01ca"+
    "\6\0\23\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\12\26\1\u01cb\1\26\6\0\23\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\10\26"+
    "\2\u01cc\2\26\6\0\23\26\10\0\1\26\1\0\17\26"+
    "\1\127\3\0\2\26\1\0\14\26\6\0\2\u01cd\21\26"+
    "\10\0\1\26\1\0\17\26\1\127\3\0\2\26\1\0"+
    "\7\26\1\321\4\26\6\0\11\26\1\321\11\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\1\26\1\u01ce\1\0"+
    "\14\26\6\0\6\26\1\u01ce\14\26\10\0\1\26\1\0"+
    "\17\26\1\127\3\0\2\26\1\0\14\26\6\0\16\26"+
    "\1\u01cf\4\26\10\0\1\26\1\0\17\26\1\127\3\0"+
    "\2\26\1\0\14\26\6\0\4\26\2\u01d0\15\26\10\0"+
    "\1\26\1\0\17\26\1\127\3\0\2\26\1\0\14\26"+
    "\6\0\15\26\1\u010e\5\26\10\0\1\26";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\23\1\1\11\12\1\1\11\13\1\10\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\4\0\2\1\1\0\1\11\4\1"+
    "\2\0\1\11\3\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\0\4\1\3\0\1\11\1\0\1\11"+
    "\4\0\2\11\2\0\2\11\27\1\2\0\30\1\3\11"+
    "\2\1\3\0\1\1\1\0\1\11\1\1\1\0\1\11"+
    "\5\0\1\1\1\11\1\1\1\0\3\1\3\0\31\1"+
    "\1\11\30\1\2\0\1\1\1\0\1\11\2\1\3\0"+
    "\1\11\55\1\1\0\1\11\1\0\1\11\45\1\1\0"+
    "\34\1\1\0\24\1\1\0\17\1\1\11\55\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int commentLevel = 0;


  _DylanLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _DylanLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { return DylanTypes.RBRACE;
          }
        case 121: break;
        case 102: 
          { return DylanTypes.DEFINE;
          }
        case 122: break;
        case 30: 
          { return DylanTypes.RBRACKET;
          }
        case 123: break;
        case 31: 
          { return DylanTypes.LBRACE;
          }
        case 124: break;
        case 22: 
          { return DylanTypes.AMPERSAND;
          }
        case 125: break;
        case 58: 
          { return DylanTypes.HASH_PAREN;
          }
        case 126: break;
        case 100: 
          { return DylanTypes.SELECT;
          }
        case 127: break;
        case 74: 
          { return DylanTypes.USE;
          }
        case 128: break;
        case 113: 
          { return DylanTypes.KEYED_BY;
          }
        case 129: break;
        case 91: 
          { return DylanTypes.SUITE;
          }
        case 130: break;
        case 14: 
          { return DylanTypes.TILDE;
          }
        case 131: break;
        case 120: 
          { return DylanTypes.COPY_DOWN_METHOD;
          }
        case 132: break;
        case 97: 
          { return DylanTypes.CREATE;
          }
        case 133: break;
        case 24: 
          { yybegin(STRING); return DylanTypes.STRING_CHARACTER;
          }
        case 134: break;
        case 59: 
          { return DylanTypes.HASH_BRACKET;
          }
        case 135: break;
        case 6: 
          { yybegin(DYLAN_CODE); return DylanTypes.CRLF;
          }
        case 136: break;
        case 18: 
          { return DylanTypes.SLASH;
          }
        case 137: break;
        case 76: 
          { return DylanTypes.NONDEFINING_BEGIN_WORD;
          }
        case 138: break;
        case 35: 
          { return DylanTypes.VARIABLE_IGNORE;
          }
        case 139: break;
        case 62: 
          { return DylanTypes.IF;
          }
        case 140: break;
        case 23: 
          { return DylanTypes.VERT_BAR;
          }
        case 141: break;
        case 82: 
          { return DylanTypes.FROM;
          }
        case 142: break;
        case 116: 
          { return DylanTypes.OTHERWISE;
          }
        case 143: break;
        case 85: 
          { return DylanTypes.HASH_NEXT;
          }
        case 144: break;
        case 2: 
          { yybegin(WAITING_SEPARATOR); return DylanTypes.KEY;
          }
        case 145: break;
        case 96: 
          { return DylanTypes.UNTIL;
          }
        case 146: break;
        case 68: 
          { return DylanTypes.CHARACTER_LITERAL;
          }
        case 147: break;
        case 15: 
          { return DylanTypes.MINUS;
          }
        case 148: break;
        case 28: 
          { return DylanTypes.RPAREN;
          }
        case 149: break;
        case 29: 
          { return DylanTypes.LBRACKET;
          }
        case 150: break;
        case 52: 
          { return DylanTypes.ESCAPED_WORD;
          }
        case 151: break;
        case 36: 
          { return DylanTypes.COMMENT;
          }
        case 152: break;
        case 37: 
          { return DylanTypes.STRING_CHARACTER;
          }
        case 153: break;
        case 87: 
          { return DylanTypes.BEGIN;
          }
        case 154: break;
        case 60: 
          { return DylanTypes.BY;
          }
        case 155: break;
        case 117: 
          { return DylanTypes.EXCEPTION;
          }
        case 156: break;
        case 25: 
          { return DylanTypes.DOT;
          }
        case 157: break;
        case 50: 
          { return DylanTypes.COLON_EQUAL;
          }
        case 158: break;
        case 4: 
          { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
          }
        case 159: break;
        case 55: 
          { return DylanTypes.HASH_HASH;
          }
        case 160: break;
        case 56: 
          { return DylanTypes.HASH_T;
          }
        case 161: break;
        case 7: 
          { return TokenType.WHITE_SPACE;
          }
        case 162: break;
        case 61: 
          { return DylanTypes.TO;
          }
        case 163: break;
        case 21: 
          { return DylanTypes.GREATER_THAN;
          }
        case 164: break;
        case 78: 
          { return DylanTypes.ELSE;
          }
        case 165: break;
        case 49: 
          { return DylanTypes.CONSTRAINED_NAME;
          }
        case 166: break;
        case 51: 
          { return DylanTypes.COLON_COLON;
          }
        case 167: break;
        case 27: 
          { return DylanTypes.LPAREN;
          }
        case 168: break;
        case 17: 
          { return DylanTypes.STAR;
          }
        case 169: break;
        case 8: 
          { return DylanTypes.VALUE;
          }
        case 170: break;
        case 66: 
          { return DylanTypes.STRING_ESCAPE_CHARACTER;
          }
        case 171: break;
        case 81: 
          { return DylanTypes.THEN;
          }
        case 172: break;
        case 79: 
          { return DylanTypes.SLOT;
          }
        case 173: break;
        case 64: 
          { commentLevel--; if (commentLevel == 0) { yybegin(DYLAN_CODE);} return DylanTypes.COMMENT;
          }
        case 174: break;
        case 93: 
          { return DylanTypes.WHILE;
          }
        case 175: break;
        case 13: 
          { return DylanTypes.EQUAL;
          }
        case 176: break;
        case 106: 
          { return DylanTypes.CLEANUP;
          }
        case 177: break;
        case 92: 
          { return DylanTypes.LOCAL;
          }
        case 178: break;
        case 41: 
          { return DylanTypes.KEYWORD;
          }
        case 179: break;
        case 110: 
          { return DylanTypes.HANDLER_T;
          }
        case 180: break;
        case 99: 
          { return DylanTypes.ELSEIF;
          }
        case 181: break;
        case 77: 
          { return DylanTypes.CASE;
          }
        case 182: break;
        case 10: 
          { return DylanTypes.NUMBER;
          }
        case 183: break;
        case 114: 
          { return DylanTypes.VARIABLE_T;
          }
        case 184: break;
        case 12: 
          { return DylanTypes.QUERY;
          }
        case 185: break;
        case 5: 
          { yybegin(WAITING_VALUE); return DylanTypes.HEADER_SEPARATOR;
          }
        case 186: break;
        case 107: 
          { return DylanTypes.FINALLY;
          }
        case 187: break;
        case 84: 
          { return DylanTypes.HASH_REST;
          }
        case 188: break;
        case 11: 
          { return DylanTypes.NONDEFINING_NONEXPRESSION_WORD;
          }
        case 189: break;
        case 57: 
          { return DylanTypes.HASH_F;
          }
        case 190: break;
        case 98: 
          { return DylanTypes.EXPORT;
          }
        case 191: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 192: break;
        case 118: 
          { return DylanTypes.AFTERWARDS;
          }
        case 193: break;
        case 75: 
          { return DylanTypes.HASH_KEY;
          }
        case 194: break;
        case 19: 
          { return DylanTypes.CARET;
          }
        case 195: break;
        case 69: 
          { return DylanTypes.ALL;
          }
        case 196: break;
        case 9: 
          { yybegin(YYINITIAL); return DylanTypes.CRLF;
          }
        case 197: break;
        case 40: 
          { yybegin(DYLAN_CODE); return DylanTypes.UNIQUE_STRING_CHARACTER;
          }
        case 198: break;
        case 95: 
          { return DylanTypes.USING;
          }
        case 199: break;
        case 45: 
          { return DylanTypes.TILDE_EQUAL;
          }
        case 200: break;
        case 46: 
          { yybegin(COMMENT_BLOCK); commentLevel++; return DylanTypes.COMMENT;
          }
        case 201: break;
        case 94: 
          { return DylanTypes.MACRO_T;
          }
        case 202: break;
        case 72: 
          { return DylanTypes.FOR;
          }
        case 203: break;
        case 33: 
          { return DylanTypes.COMMA;
          }
        case 204: break;
        case 71: 
          { return DylanTypes.ELLIPSIS;
          }
        case 205: break;
        case 44: 
          { return DylanTypes.EQUAL_ARROW;
          }
        case 206: break;
        case 112: 
          { return DylanTypes.FUNCTION;
          }
        case 207: break;
        case 26: 
          { /* return DylanTypes.CRLF; */
          }
        case 208: break;
        case 111: 
          { return DylanTypes.CONSTANT_T;
          }
        case 209: break;
        case 105: 
          { return DylanTypes.UNLESS;
          }
        case 210: break;
        case 86: 
          { return DylanTypes.BELOW;
          }
        case 211: break;
        case 101: 
          { return DylanTypes.DOMAIN;
          }
        case 212: break;
        case 34: 
          { return DylanTypes.SEMICOLON;
          }
        case 213: break;
        case 65: 
          { commentLevel++; yybegin(COMMENT_BLOCK); return DylanTypes.COMMENT;
          }
        case 214: break;
        case 119: 
          { return DylanTypes.SHARED_SYMBOLS_T;
          }
        case 215: break;
        case 108: 
          { return DylanTypes.LIBRARY;
          }
        case 216: break;
        case 43: 
          { return DylanTypes.EQUAL_EQUAL;
          }
        case 217: break;
        case 89: 
          { return DylanTypes.CLASS;
          }
        case 218: break;
        case 73: 
          { return DylanTypes.LET;
          }
        case 219: break;
        case 109: 
          { return DylanTypes.GENERIC;
          }
        case 220: break;
        case 103: 
          { return DylanTypes.MODULE;
          }
        case 221: break;
        case 88: 
          { return DylanTypes.BLOCK;
          }
        case 222: break;
        case 83: 
          { return DylanTypes.WHEN;
          }
        case 223: break;
        case 20: 
          { return DylanTypes.LESS_THAN;
          }
        case 224: break;
        case 63: 
          { return DylanTypes.IN;
          }
        case 225: break;
        case 67: 
          { return DylanTypes.TILDE_EQUAL_EQUAL;
          }
        case 226: break;
        case 38: 
          { yybegin(DYLAN_CODE); return DylanTypes.STRING_CHARACTER;
          }
        case 227: break;
        case 48: 
          { return DylanTypes.GREATER_THAN_EQUAL;
          }
        case 228: break;
        case 80: 
          { return DylanTypes.TEST;
          }
        case 229: break;
        case 42: 
          { return DylanTypes.QUERY_QUERY;
          }
        case 230: break;
        case 90: 
          { return DylanTypes.ABOVE;
          }
        case 231: break;
        case 47: 
          { return DylanTypes.LESS_THAN_EQUAL;
          }
        case 232: break;
        case 3: 
          { yybegin(DYLAN_CODE); return TokenType.WHITE_SPACE;
          }
        case 233: break;
        case 16: 
          { return DylanTypes.PLUS;
          }
        case 234: break;
        case 70: 
          { return DylanTypes.END;
          }
        case 235: break;
        case 104: 
          { return DylanTypes.METHOD;
          }
        case 236: break;
        case 39: 
          { return DylanTypes.UNIQUE_STRING_CHARACTER;
          }
        case 237: break;
        case 115: 
          { return DylanTypes.HASH_ALL_KEYS;
          }
        case 238: break;
        case 53: 
          { return DylanTypes.OPERATOR_NAME;
          }
        case 239: break;
        case 54: 
          { yybegin(UNIQUE_STRING); return DylanTypes.UNIQUE_STRING_CHARACTER;
          }
        case 240: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
